// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: D:/t/PARSER/D/domain.flex

/**
 *	Domain Parser
 */

package br.pucrs.smart.validator;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\1\7\0"+
    "\2\3\3\0\1\4\2\0\12\5\1\6\1\7\1\0"+
    "\1\3\1\0\1\10\1\0\32\5\4\0\1\11\1\0"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\5\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\5\1\36\1\37"+
    "\1\40\1\5\57\0\1\5\12\0\1\5\4\0\1\5"+
    "\5\0\27\5\1\0\37\5\1\0\u01ca\5\4\0\14\5"+
    "\16\0\5\5\7\0\1\5\1\0\1\5\201\0\5\5"+
    "\1\0\2\5\2\0\4\5\1\0\1\5\6\0\1\5"+
    "\1\0\3\5\1\0\1\5\1\0\24\5\1\0\123\5"+
    "\1\0\213\5\10\0\246\5\1\0\46\5\2\0\1\5"+
    "\6\0\51\5\107\0\33\5\4\0\4\5\55\0\53\5"+
    "\25\0\12\5\4\0\2\5\1\0\143\5\1\0\1\5"+
    "\17\0\2\5\7\0\17\5\2\0\1\5\20\0\1\5"+
    "\1\0\36\5\35\0\131\5\13\0\1\5\16\0\53\5"+
    "\11\0\2\5\4\0\1\5\5\0\26\5\4\0\1\5"+
    "\11\0\1\5\3\0\1\5\27\0\31\5\7\0\13\5"+
    "\65\0\25\5\1\0\10\5\106\0\66\5\3\0\1\5"+
    "\22\0\1\5\7\0\12\5\4\0\12\5\1\0\20\5"+
    "\4\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\3\0\1\5\20\0\1\5"+
    "\15\0\2\5\1\0\3\5\4\0\14\5\12\0\1\5"+
    "\10\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\2\5\1\0\2\5\37\0\4\5"+
    "\1\0\1\5\7\0\12\5\2\0\3\5\20\0\11\5"+
    "\1\0\3\5\1\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\5\5\3\0\1\5\22\0\1\5\17\0\2\5"+
    "\4\0\12\5\11\0\1\5\13\0\10\5\2\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\3\0\1\5\36\0\2\5\1\0\3\5\4\0\12\5"+
    "\1\0\1\5\21\0\1\5\1\0\6\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\2\5\3\0\3\5\3\0\14\5\26\0\1\5"+
    "\25\0\12\5\25\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\20\5\3\0\1\5\32\0\3\5\5\0\2\5"+
    "\4\0\12\5\20\0\1\5\4\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\12\5\1\0\5\5\3\0\1\5"+
    "\40\0\1\5\1\0\2\5\4\0\12\5\1\0\2\5"+
    "\22\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5"+
    "\20\0\1\5\5\0\3\5\10\0\3\5\4\0\12\5"+
    "\12\0\6\5\5\0\22\5\3\0\30\5\1\0\11\5"+
    "\1\0\1\5\2\0\7\5\37\0\12\5\21\0\60\5"+
    "\1\0\2\5\14\0\7\5\11\0\12\5\47\0\2\5"+
    "\1\0\1\5\1\0\5\5\1\0\30\5\1\0\1\5"+
    "\1\0\12\5\1\0\2\5\11\0\1\5\2\0\5\5"+
    "\1\0\1\5\11\0\12\5\2\0\4\5\40\0\1\5"+
    "\37\0\12\5\26\0\10\5\1\0\44\5\33\0\5\5"+
    "\163\0\53\5\24\0\13\5\6\0\6\5\4\0\4\5"+
    "\3\0\1\5\3\0\2\5\7\0\3\5\4\0\15\5"+
    "\14\0\1\5\1\0\12\5\6\0\46\5\1\0\1\5"+
    "\5\0\1\5\2\0\53\5\1\0\115\5\1\0\4\5"+
    "\2\0\7\5\1\0\1\5\1\0\4\5\2\0\51\5"+
    "\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5"+
    "\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5"+
    "\1\0\4\5\2\0\103\5\45\0\20\5\20\0\126\5"+
    "\2\0\6\5\3\0\u016c\5\2\0\21\5\1\0\32\5"+
    "\5\0\113\5\6\0\10\5\7\0\15\5\1\0\4\5"+
    "\16\0\22\5\16\0\22\5\16\0\15\5\1\0\3\5"+
    "\17\0\64\5\43\0\1\5\4\0\1\5\3\0\12\5"+
    "\46\0\12\5\6\0\131\5\7\0\5\5\2\0\42\5"+
    "\1\0\1\5\5\0\106\5\12\0\37\5\47\0\50\5"+
    "\2\0\5\5\13\0\54\5\4\0\32\5\6\0\12\5"+
    "\46\0\27\5\11\0\65\5\53\0\12\5\6\0\12\5"+
    "\15\0\1\5\135\0\57\5\21\0\7\5\4\0\12\5"+
    "\51\0\36\5\15\0\70\5\32\0\44\5\34\0\12\5"+
    "\3\0\61\5\2\0\11\5\7\0\53\5\2\0\3\5"+
    "\51\0\4\5\1\0\6\5\1\0\2\5\3\0\1\5"+
    "\5\0\300\5\100\0\26\5\2\0\6\5\2\0\46\5"+
    "\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\37\5\2\0\65\5\1\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5"+
    "\164\0\1\5\15\0\1\5\20\0\15\5\145\0\1\5"+
    "\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5"+
    "\64\0\2\5\u017b\0\57\5\1\0\57\5\1\0\205\5"+
    "\6\0\4\5\3\0\2\5\14\0\46\5\1\0\1\5"+
    "\5\0\1\5\2\0\70\5\7\0\1\5\20\0\27\5"+
    "\11\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\120\0\1\5\325\0\2\5\52\0\5\5\5\0\2\5"+
    "\4\0\126\5\6\0\3\5\1\0\132\5\1\0\4\5"+
    "\5\0\53\5\1\0\136\5\21\0\33\5\65\0\306\5"+
    "\112\0\360\5\20\0\215\5\103\0\56\5\2\0\15\5"+
    "\3\0\34\5\24\0\57\5\20\0\37\5\2\0\106\5"+
    "\61\0\11\5\2\0\147\5\2\0\65\5\2\0\5\5"+
    "\60\0\13\5\1\0\3\5\1\0\4\5\1\0\27\5"+
    "\35\0\64\5\16\0\62\5\34\0\12\5\30\0\6\5"+
    "\3\0\1\5\1\0\2\5\1\0\46\5\12\0\27\5"+
    "\31\0\35\5\7\0\57\5\34\0\13\5\6\0\5\5"+
    "\1\0\31\5\1\0\51\5\27\0\3\5\1\0\10\5"+
    "\4\0\12\5\6\0\27\5\3\0\1\5\3\0\62\5"+
    "\1\0\1\5\3\0\2\5\2\0\5\5\2\0\1\5"+
    "\1\0\1\5\30\0\3\5\2\0\13\5\7\0\3\5"+
    "\14\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5"+
    "\1\0\7\5\1\0\53\5\1\0\14\5\10\0\163\5"+
    "\15\0\12\5\6\0\244\5\14\0\27\5\4\0\61\5"+
    "\4\0\156\5\2\0\152\5\46\0\7\5\14\0\5\5"+
    "\5\0\1\5\1\0\12\5\1\0\15\5\1\0\5\5"+
    "\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5"+
    "\41\0\153\5\22\0\100\5\2\0\66\5\50\0\14\5"+
    "\164\0\5\5\1\0\207\5\23\0\12\5\7\0\32\5"+
    "\6\0\32\5\13\0\131\5\3\0\6\5\2\0\6\5"+
    "\2\0\6\5\2\0\3\5\43\0\14\5\1\0\32\5"+
    "\1\0\23\5\1\0\2\5\1\0\17\5\2\0\16\5"+
    "\42\0\173\5\205\0\35\5\3\0\61\5\57\0\40\5"+
    "\15\0\24\5\1\0\10\5\6\0\46\5\12\0\36\5"+
    "\2\0\44\5\4\0\10\5\60\0\236\5\2\0\12\5"+
    "\6\0\44\5\4\0\44\5\4\0\50\5\10\0\64\5"+
    "\234\0\67\5\11\0\26\5\12\0\10\5\230\0\6\5"+
    "\2\0\1\5\1\0\54\5\1\0\2\5\3\0\1\5"+
    "\2\0\27\5\12\0\27\5\11\0\37\5\101\0\23\5"+
    "\1\0\2\5\12\0\26\5\12\0\32\5\106\0\70\5"+
    "\6\0\2\5\100\0\1\5\17\0\4\5\1\0\3\5"+
    "\1\0\35\5\52\0\35\5\3\0\35\5\43\0\10\5"+
    "\1\0\34\5\33\0\66\5\12\0\26\5\12\0\23\5"+
    "\15\0\22\5\156\0\111\5\67\0\63\5\15\0\63\5"+
    "\15\0\44\5\14\0\12\5\306\0\35\5\12\0\1\5"+
    "\10\0\26\5\232\0\27\5\14\0\65\5\56\0\12\5"+
    "\23\0\55\5\40\0\31\5\7\0\12\5\11\0\44\5"+
    "\17\0\12\5\4\0\1\5\13\0\43\5\3\0\1\5"+
    "\14\0\60\5\16\0\4\5\13\0\13\5\1\0\1\5"+
    "\43\0\22\5\1\0\31\5\124\0\7\5\1\0\1\5"+
    "\1\0\4\5\1\0\17\5\1\0\12\5\7\0\57\5"+
    "\21\0\12\5\13\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\3\0\1\5"+
    "\22\0\1\5\14\0\5\5\236\0\65\5\22\0\4\5"+
    "\5\0\12\5\5\0\1\5\40\0\60\5\24\0\2\5"+
    "\1\0\1\5\10\0\12\5\246\0\57\5\51\0\4\5"+
    "\44\0\60\5\24\0\1\5\13\0\12\5\46\0\53\5"+
    "\15\0\1\5\7\0\12\5\66\0\33\5\25\0\12\5"+
    "\306\0\54\5\164\0\112\5\25\0\1\5\240\0\10\5"+
    "\2\0\47\5\20\0\1\5\1\0\1\5\34\0\1\5"+
    "\12\0\50\5\7\0\1\5\25\0\1\5\13\0\56\5"+
    "\23\0\1\5\42\0\71\5\7\0\11\5\1\0\45\5"+
    "\21\0\1\5\17\0\12\5\30\0\36\5\160\0\7\5"+
    "\1\0\2\5\1\0\46\5\25\0\1\5\11\0\12\5"+
    "\6\0\6\5\1\0\2\5\1\0\40\5\16\0\1\5"+
    "\7\0\12\5\u0136\0\23\5\15\0\232\5\346\0\304\5"+
    "\274\0\57\5\321\0\107\5\271\0\71\5\7\0\37\5"+
    "\1\0\12\5\146\0\36\5\22\0\60\5\20\0\4\5"+
    "\14\0\12\5\11\0\25\5\5\0\23\5\260\0\100\5"+
    "\200\0\113\5\5\0\1\5\102\0\15\5\100\0\2\5"+
    "\1\0\1\5\34\0\370\5\10\0\363\5\15\0\37\5"+
    "\61\0\3\5\21\0\4\5\10\0\u018c\5\4\0\153\5"+
    "\5\0\15\5\3\0\11\5\7\0\12\5\146\0\125\5"+
    "\1\0\107\5\1\0\2\5\2\0\1\5\2\0\2\5"+
    "\2\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5"+
    "\1\0\101\5\1\0\4\5\2\0\10\5\1\0\7\5"+
    "\1\0\34\5\1\0\4\5\1\0\5\5\1\0\1\5"+
    "\3\0\7\5\1\0\u0154\5\2\0\31\5\1\0\31\5"+
    "\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5"+
    "\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5"+
    "\1\0\10\5\2\0\137\5\12\0\7\5\2\0\12\5"+
    "\4\0\1\5\u0171\0\54\5\4\0\12\5\6\0\305\5"+
    "\73\0\104\5\7\0\1\5\4\0\12\5\246\0\4\5"+
    "\1\0\33\5\1\0\2\5\1\0\1\5\2\0\1\5"+
    "\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5"+
    "\6\0\1\5\4\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5"+
    "\1\0\4\5\1\0\4\5\1\0\1\5\1\0\12\5"+
    "\1\0\21\5\5\0\3\5\1\0\5\5\1\0\21\5"+
    "\104\0\327\5\51\0\65\5\13\0\336\5\2\0\u0182\5"+
    "\16\0\u0131\5\37\0\36\5\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\0\11\4\13\5"+
    "\1\1\1\6\14\4\13\5\1\4\1\7\6\4\1\10"+
    "\3\4\13\5\12\4\4\5\1\11\1\12\6\5\12\4"+
    "\11\5\1\13\1\14\1\4\1\15\1\16\1\17\1\20"+
    "\4\4\1\14\1\21\1\5\1\22\1\23\5\5\4\4"+
    "\1\24\1\4\1\5\1\25\4\5\3\4\1\14\5\5"+
    "\4\4\5\5\3\4\1\5\1\26\1\5\1\27\1\5"+
    "\2\4\1\30\2\5\1\4\1\31\1\32\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\102\0\143\0\204\0\245\0\306"+
    "\0\347\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce"+
    "\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6"+
    "\0\u02f7\0\u0318\0\u0339\0\u035a\0\102\0\u037b\0\u039c\0\u03bd"+
    "\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5"+
    "\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd"+
    "\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\143\0\u06b4"+
    "\0\u06d5\0\u06f6\0\u0717\0\u0738\0\u0759\0\143\0\u077a\0\u079b"+
    "\0\u07bc\0\u07dd\0\u07fe\0\u081f\0\u0840\0\u0861\0\u0882\0\u08a3"+
    "\0\u08c4\0\u08e5\0\u0906\0\u0927\0\u0948\0\u0969\0\u098a\0\u09ab"+
    "\0\u09cc\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50\0\u0a71\0\u0a92\0\u0ab3"+
    "\0\u0ad4\0\u0af5\0\u0210\0\u0210\0\u0b16\0\u0b37\0\u0b58\0\u0b79"+
    "\0\u0b9a\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81"+
    "\0\u0ca2\0\u0cc3\0\u0ce4\0\u0d05\0\u0d26\0\u0d47\0\u0d68\0\u0d89"+
    "\0\u0daa\0\u0dcb\0\u0dec\0\u0e0d\0\u0e2e\0\u0210\0\u0e4f\0\u0e70"+
    "\0\143\0\143\0\143\0\143\0\u0e91\0\u0eb2\0\u0ed3\0\u0ef4"+
    "\0\143\0\u0210\0\u0f15\0\u0210\0\u0210\0\u0f36\0\u0f57\0\u0f78"+
    "\0\u0f99\0\u0fba\0\u0fdb\0\u0ffc\0\u101d\0\u103e\0\143\0\u105f"+
    "\0\u1080\0\u0210\0\u10a1\0\u10c2\0\u10e3\0\u1104\0\u1125\0\u1146"+
    "\0\u1167\0\u1188\0\u11a9\0\u11ca\0\u11eb\0\u120c\0\u122d\0\u124e"+
    "\0\u126f\0\u1290\0\u12b1\0\u12d2\0\u12f3\0\u1314\0\u1335\0\u1356"+
    "\0\u1377\0\u1398\0\u13b9\0\u13da\0\u0210\0\u13fb\0\u0210\0\u141c"+
    "\0\u143d\0\u145e\0\u0210\0\u147f\0\u14a0\0\u14c1\0\u0210\0\u0210"+
    "\0\u14e2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\2\4\1\5\1\6\1\7\1\10"+
    "\1\0\1\11\2\5\1\12\1\13\1\14\1\5\1\15"+
    "\4\5\1\16\1\5\1\17\2\5\1\20\2\5\1\21"+
    "\2\5\1\0\1\2\104\0\2\5\3\0\30\5\5\0"+
    "\1\22\4\0\1\23\1\22\1\24\1\25\1\26\1\22"+
    "\1\27\1\22\1\30\4\22\1\31\1\32\1\22\1\33"+
    "\1\22\1\34\4\22\2\7\1\35\36\7\5\0\1\36"+
    "\4\0\27\36\4\0\2\5\3\0\13\5\1\37\1\5"+
    "\1\40\5\5\1\41\4\5\4\0\2\5\3\0\5\5"+
    "\1\42\10\5\1\43\11\5\4\0\2\5\3\0\26\5"+
    "\1\44\1\5\4\0\2\5\3\0\16\5\1\45\11\5"+
    "\4\0\2\5\3\0\16\5\1\46\11\5\4\0\2\5"+
    "\3\0\16\5\1\47\11\5\4\0\2\5\3\0\21\5"+
    "\1\50\6\5\4\0\2\5\3\0\16\5\1\51\11\5"+
    "\4\0\2\5\3\0\11\5\1\52\16\5\4\0\2\22"+
    "\3\0\30\22\4\0\2\22\3\0\3\22\1\53\24\22"+
    "\4\0\2\22\3\0\16\22\1\54\11\22\4\0\2\22"+
    "\3\0\16\22\1\55\11\22\4\0\2\22\3\0\6\22"+
    "\1\56\21\22\4\0\2\22\3\0\16\22\1\57\11\22"+
    "\4\0\2\22\3\0\15\22\1\60\12\22\4\0\2\22"+
    "\3\0\2\22\1\61\25\22\4\0\2\22\3\0\1\22"+
    "\1\62\17\22\1\63\6\22\4\0\2\22\3\0\5\22"+
    "\1\64\22\22\4\0\2\22\3\0\27\22\1\65\4\0"+
    "\2\36\3\0\30\36\4\0\2\5\3\0\25\5\1\66"+
    "\2\5\4\0\2\5\3\0\4\5\1\67\23\5\4\0"+
    "\1\70\1\5\3\0\30\5\4\0\2\5\3\0\6\5"+
    "\1\71\21\5\4\0\2\5\3\0\14\5\1\72\13\5"+
    "\4\0\2\5\3\0\11\5\1\73\16\5\4\0\2\5"+
    "\3\0\21\5\1\74\6\5\4\0\2\5\3\0\13\5"+
    "\1\75\14\5\4\0\2\5\3\0\23\5\1\76\4\5"+
    "\4\0\2\5\3\0\16\5\1\77\11\5\4\0\2\5"+
    "\3\0\14\5\1\100\13\5\4\0\2\5\3\0\23\5"+
    "\1\101\4\5\4\0\2\22\3\0\23\22\1\102\4\22"+
    "\4\0\2\22\3\0\15\22\1\103\12\22\4\0\2\22"+
    "\3\0\14\22\1\104\13\22\4\0\2\22\3\0\6\22"+
    "\1\105\21\22\4\0\2\22\3\0\1\22\1\106\26\22"+
    "\4\0\2\22\3\0\11\22\1\107\16\22\4\0\2\22"+
    "\3\0\12\22\1\110\15\22\4\0\2\22\3\0\21\22"+
    "\1\111\6\22\4\0\2\22\3\0\5\22\1\112\22\22"+
    "\4\0\2\22\3\0\20\22\1\113\7\22\4\0\2\22"+
    "\3\0\17\22\1\114\10\22\4\0\2\5\3\0\1\5"+
    "\1\115\26\5\4\0\2\5\3\0\14\5\1\116\13\5"+
    "\4\0\2\5\3\0\11\5\1\117\16\5\4\0\2\5"+
    "\3\0\1\5\1\120\26\5\4\0\2\5\3\0\22\5"+
    "\1\121\5\5\4\0\2\5\3\0\1\5\1\122\26\5"+
    "\4\0\2\5\3\0\4\5\1\123\23\5\4\0\2\5"+
    "\3\0\2\5\1\124\25\5\4\0\2\5\3\0\5\5"+
    "\1\125\22\5\4\0\2\5\3\0\10\5\1\126\17\5"+
    "\4\0\2\22\3\0\11\22\1\127\16\22\4\0\2\22"+
    "\3\0\22\22\1\130\5\22\4\0\2\22\3\0\1\22"+
    "\1\131\26\22\4\0\2\22\3\0\5\22\1\132\22\22"+
    "\4\0\2\22\3\0\13\22\1\133\14\22\4\0\2\22"+
    "\3\0\23\22\1\134\4\22\4\0\2\22\3\0\5\22"+
    "\1\135\22\22\4\0\2\22\3\0\1\22\1\136\26\22"+
    "\4\0\2\22\3\0\3\22\1\137\1\140\23\22\4\0"+
    "\2\22\3\0\24\22\1\141\3\22\4\0\2\22\3\0"+
    "\5\22\1\142\22\22\4\0\2\5\3\0\27\5\1\143"+
    "\4\0\2\5\3\0\16\5\1\144\11\5\4\0\2\5"+
    "\3\0\15\5\1\145\12\5\4\0\2\5\3\0\11\5"+
    "\1\146\16\5\4\0\2\5\3\0\23\5\1\147\4\5"+
    "\4\0\2\5\3\0\13\5\1\150\14\5\4\0\1\151"+
    "\1\5\3\0\30\5\4\0\2\5\3\0\13\5\1\152"+
    "\14\5\4\0\2\5\3\0\23\5\1\153\4\5\4\0"+
    "\2\5\3\0\11\5\1\154\16\5\4\0\2\22\3\0"+
    "\16\22\1\155\11\22\4\0\2\22\3\0\23\22\1\156"+
    "\4\22\4\0\2\22\3\0\11\22\1\157\16\22\4\0"+
    "\2\22\3\0\3\22\1\160\24\22\4\0\2\22\3\0"+
    "\3\22\1\161\24\22\4\0\2\22\3\0\14\22\1\162"+
    "\13\22\4\0\2\22\3\0\16\22\1\163\11\22\4\0"+
    "\2\22\3\0\11\22\1\164\16\22\4\0\2\22\3\0"+
    "\11\22\1\165\16\22\4\0\2\22\3\0\22\22\1\166"+
    "\5\22\4\0\2\5\3\0\22\5\1\167\5\5\4\0"+
    "\2\5\3\0\22\5\1\170\5\5\4\0\2\5\3\0"+
    "\5\5\1\171\22\5\4\0\2\5\3\0\15\5\1\172"+
    "\12\5\4\0\2\5\3\0\22\5\1\173\5\5\4\0"+
    "\2\5\3\0\13\5\1\174\14\5\4\0\2\5\3\0"+
    "\1\5\1\175\2\5\1\176\23\5\4\0\2\5\3\0"+
    "\5\5\1\177\22\5\4\0\2\5\3\0\11\5\1\200"+
    "\16\5\4\0\2\5\3\0\15\5\1\201\12\5\4\0"+
    "\2\22\3\0\15\22\1\202\12\22\4\0\2\22\3\0"+
    "\21\22\1\203\6\22\4\0\2\22\3\0\15\22\1\204"+
    "\12\22\4\0\2\22\3\0\23\22\1\205\4\22\4\0"+
    "\2\22\3\0\23\22\1\206\4\22\4\0\2\22\3\0"+
    "\5\22\1\207\22\22\4\0\2\22\3\0\15\22\1\210"+
    "\12\22\4\0\2\22\3\0\3\22\1\211\24\22\4\0"+
    "\2\22\3\0\21\22\1\212\6\22\4\0\1\213\1\5"+
    "\3\0\30\5\4\0\2\5\3\0\23\5\1\214\4\5"+
    "\4\0\2\5\3\0\6\5\1\215\21\5\4\0\2\5"+
    "\3\0\24\5\1\216\3\5\4\0\2\5\3\0\14\5"+
    "\1\217\13\5\4\0\2\5\3\0\14\5\1\220\13\5"+
    "\4\0\2\22\3\0\1\22\1\221\26\22\4\0\2\22"+
    "\3\0\22\22\1\222\5\22\4\0\2\22\3\0\23\22"+
    "\1\223\4\22\4\0\2\22\3\0\4\22\1\224\23\22"+
    "\4\0\2\22\3\0\1\22\1\225\26\22\4\0\2\22"+
    "\3\0\5\22\1\226\22\22\4\0\2\5\3\0\25\5"+
    "\1\21\2\5\4\0\1\227\1\5\3\0\30\5\4\0"+
    "\2\5\3\0\23\5\1\230\4\5\4\0\2\5\3\0"+
    "\21\5\1\231\6\5\4\0\2\5\3\0\5\5\1\232"+
    "\22\5\4\0\2\22\3\0\11\22\1\233\16\22\4\0"+
    "\2\22\3\0\5\22\1\234\22\22\4\0\2\22\3\0"+
    "\11\22\1\235\16\22\4\0\2\22\3\0\23\22\1\236"+
    "\4\22\4\0\2\22\3\0\14\22\1\237\13\22\4\0"+
    "\2\5\3\0\16\5\1\240\11\5\4\0\2\5\3\0"+
    "\5\5\1\241\22\5\4\0\2\5\3\0\11\5\1\242"+
    "\16\5\4\0\1\243\1\5\3\0\30\5\4\0\2\22"+
    "\3\0\15\22\1\244\12\22\4\0\2\22\3\0\21\22"+
    "\1\245\6\22\4\0\2\22\3\0\23\22\1\246\4\22"+
    "\4\0\2\22\3\0\5\22\1\247\22\22\4\0\2\22"+
    "\3\0\5\22\1\250\22\22\4\0\2\5\3\0\15\5"+
    "\1\251\12\5\4\0\2\5\3\0\21\5\1\201\6\5"+
    "\4\0\2\5\3\0\15\5\1\252\12\5\4\0\2\5"+
    "\3\0\1\5\1\175\1\253\25\5\4\0\2\22\3\0"+
    "\23\22\1\254\4\22\4\0\2\22\3\0\22\22\1\255"+
    "\5\22\4\0\2\22\3\0\11\22\1\256\16\22\4\0"+
    "\2\22\3\0\22\22\1\257\5\22\4\0\2\22\3\0"+
    "\15\22\1\260\12\22\4\0\2\5\3\0\3\5\1\261"+
    "\24\5\4\0\2\5\3\0\7\5\1\201\20\5\4\0"+
    "\2\5\3\0\5\5\1\262\22\5\4\0\2\22\3\0"+
    "\22\22\1\263\5\22\4\0\2\22\3\0\16\22\1\264"+
    "\11\22\4\0\2\22\3\0\23\22\1\265\4\22\4\0"+
    "\2\5\3\0\5\5\1\201\22\5\4\0\2\5\3\0"+
    "\6\5\1\266\21\5\4\0\2\22\3\0\15\22\1\267"+
    "\12\22\4\0\2\22\3\0\22\22\1\270\5\22\4\0"+
    "\2\5\3\0\16\5\1\271\11\5\4\0\2\5\3\0"+
    "\21\5\1\261\6\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5379];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\11\1\1\3\0\24\1\1\11\234\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private Parser yyparser;
  public static int lineCount = 1;
  
  public static void reset(){
	lineCount = 1;
  }

  public Yylex(java.io.Reader r, Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 27: break;
          case 2:
            { lineCount++;
            }
            // fall through
          case 28: break;
          case 3:
            { return (int) yycharat(0);
            }
            // fall through
          case 29: break;
          case 4:
            { yyparser.yylval = new ParserVal(yytext());
				 return Parser.STRING;
            }
            // fall through
          case 30: break;
          case 5:
            { yyparser.yylval = new ParserVal(yytext());
				 return Parser.REQ;
            }
            // fall through
          case 31: break;
          case 6:
            { yyparser.yylval = new ParserVal(yytext());
				 return Parser.OBJ;
            }
            // fall through
          case 32: break;
          case 7:
            { return Parser.AND;
            }
            // fall through
          case 33: break;
          case 8:
            { return Parser.NOT;
            }
            // fall through
          case 34: break;
          case 9:
            { return Parser.GOAL;
            }
            // fall through
          case 35: break;
          case 10:
            { return Parser.INIT;
            }
            // fall through
          case 36: break;
          case 11:
            { return Parser.TYPES;
            }
            // fall through
          case 37: break;
          case 12:
            { yyparser.yylval = new ParserVal(yytext());
				  return Parser.CSTAT;
            }
            // fall through
          case 38: break;
          case 13:
            { return Parser.DEFINE;
            }
            // fall through
          case 39: break;
          case 14:
            { return Parser.DOMAIN;
            }
            // fall through
          case 40: break;
          case 15:
            { return Parser.EXISTS;
            }
            // fall through
          case 41: break;
          case 16:
            { return Parser.FORALL;
            }
            // fall through
          case 42: break;
          case 17:
            { return Parser.ACTION;
            }
            // fall through
          case 43: break;
          case 18:
            { return Parser.PDOMAIN;
            }
            // fall through
          case 44: break;
          case 19:
            { return Parser.EFFECT;
            }
            // fall through
          case 45: break;
          case 20:
            { return Parser.PROBLEM;
            }
            // fall through
          case 46: break;
          case 21:
            { return Parser.OBJECTS;
            }
            // fall through
          case 47: break;
          case 22:
            { return Parser.PARAMETERS;
            }
            // fall through
          case 48: break;
          case 23:
            { return Parser.PREDICATES;
            }
            // fall through
          case 49: break;
          case 24:
            { return Parser.CONSTRAINTS;
            }
            // fall through
          case 50: break;
          case 25:
            { return Parser.PRECONDITION;
            }
            // fall through
          case 51: break;
          case 26:
            { return Parser.REQUIREMENTS;
            }
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
